

#!/bin/bash

#Erik Soeberg creates json file with universal epoch date for comparisons and charting in tools like highchart javascript
#June/July/Sept 2025




#if executing without these variables ther is a problem, must have his and access to the area where code is
#
if [ -z "$REFERTID" ]; then
	export REFERTID="/ssb/bruker/refertid"
fi

if [ -z "$FAME" ]; then
	export FAME="/opt/fame"
fi


if [ -z "$HOST" ]; then
	export HOST="harkhost"
fi




#location of program is the place the system getfame software is located
#setting to same folder as where the getfame script is:
GETFAMESYS="$(dirname "$(readlink -f "$0")")"
export GETFAMESYS;


show_usage() {
  echo "first param to getfame must be -n -s or -e"
  echo "getfame -n, getfame -s or expresions getfame -e"
  echo 'example : getfame -n $REFERTID/data/kpi_publ.db "total?" '
  echo 'example : getfame -s $REFERTID/data/kpi_publ.db "total?" "date 2025;deci 1" '
  echo 'example : getfame -e $REFERTID/data/kpi_publ.db "pct(total.ipr)" "date 2024 to *; deci 1" '
  echo "See  $GETFAMESYS/readme.txt or getfame -h for more samples"
  echo "PS: getfame -t test one given database read access"
  echo "PS: getfame -nq getfame -sq getfame -eq runs silent QUITE mode "
  echo "Please try again"
  exit 1
}






SWITCH=$1

if [[ "$SWITCH" == "-s" || "$SWITCH" == "-sq" ]]; then
MNAME="getfameseries"

elif [[ "$SWITCH" == "-e" || "$SWITCH" == "-eq" ]]; then
MNAME="getfameexpr"

elif [[ "$SWITCH" == "-n"  || "$SWITCH" == "-nq" ]]; then
MNAME="getfamenames"

elif [[ "$SWITCH" == "-t"  || "$SWITCH" == "-tq" ]]; then
MNAME="getfametest"

elif [[ "$SWITCH" == "-m" ]]; then
MNAME="getfamenames"
# n/m names/ metadata both works

elif [[ "$SWITCH" == "-h" ]]; then
MNAME="noname"
cat $GETFAMESYS/readme.txt
exit 1

else

show_usage
fi


#work without log not required
#if log have it where the sueres have write access to the file
export GETFAMELOG="$REFERTID/system/myfame/getlog.txt"

#lagrer resultatfil, samme som vises i skjerm terminal output:
if test ! -d $HOME/.GetFAME; then
mkdir $HOME/.GetFAME
fi

#resultfile
if [ -s $HOME/.GetFAME/$MNAME.json ]
then
  rm $HOME/.GetFAME/$MNAME.json
  touch $HOME/.GetFAME/$MNAME.json
fi


if [ -s $HOME/.GetFAME/fame.error ]
then
  rm $HOME/.GetFAME/fame.error
fi


if [ -s $HOME/.GetFAME/getfame.error ]
then
  rm $HOME/.GetFAME/getfame.error
fi

if [ -s $HOME/.GetFAME/fame.inp ]
then
  rm $HOME/.GetFAME/fame.inp
fi



ERROR_FILE=$HOME/.GetFAME/getfame.error
> $ERROR_FILE

> $HOME/.GetFAME/getfame.error
> $HOME/.GetFAME/fame.error


MYDATE=$(date +'%Y-%m-%dT%H:%M:%S')



#jun2
if [ $# -lt 2 ] || [ $# -gt 4 ];  then
cp $GETFAMESYS/error.$MNAME $ERROR_FILE  
cat $ERROR_FILE
exit 1
fi


MYDISPLAY=$DISPLAY;export MYDISPLAY


#setter FAME_PATH til katalogen der fame.inp som starter applikasjonen ligger.
FAME_PATH=$HOME/.GetFAME; export FAME_PATH


DUMMY=""

#length if string TBC
str=$2
strlen=${#str}

#A user listed all his series in the database as an argument... what about wildcarding??
if [ $strlen -ge 64000 ]; then
echo 'Sorry, wildlist length :' $(($strlen+0)) 'can NOT be longer then maximum max is 64 000 characters'
echo 'Reduce the length of the wildlist string and try again!'
exit 1
fi



cp -f  $GETFAMESYS/api.inp $HOME/.GetFAME/fame.inp



#jun2
#
#
#
if  [ $# -eq 2 ]; then
echo 'try; $'$MNAME '  ' "\""$2"\""   >> $HOME/.GetFAME/fame.inp

elif  [ $# -eq 3 ]; then
echo 'try; $'$MNAME '  ' "\""$2"\"" ', ' "\""$3"\"" ',' "\""$DUMMY"\""  >> $HOME/.GetFAME/fame.inp

else
echo 'try; $'$MNAME '  ' "\""$2"\"" ', ' "\""$3"\"" ', '"\""$4"\""  >> $HOME/.GetFAME/fame.inp
fi

echo '; otherwise; $writeerror lasterror; end try; ' >> $HOME/.GetFAME/fame.inp



#FAME_TEMP for storing of fames 2 work files 
FAME_TEMP=/tmp;       export FAME_TEMP



#better when fame licenece expires:
$FAME/fame i $HOME/.GetFAME/fame.inp  &>/dev/null  

#if exist only if success no output to screen if queiet mode
#if [[ "$SWITCH" == "-s" || "$SWITCH" == "-sq" ]]; then
#
#
  
if [[ -s $HOME/.GetFAME/$MNAME.json  ]]; then

 if [[ "$MNAME" == "getfameseries" ]] || [[ "$MNAME" == "getfameexpr" ]]; then
  #echo "hello I am making a highchartdata file for you as well"
{
echo "myData ="
cat "$HOME/.GetFAME/$MNAME.json"
} > "$HOME/.GetFAME/highchartdata.json"
fi

case "$SWITCH" in 
 -n|-e|-s|-t)
 cat  $HOME/.GetFAME/$MNAME.json
esac
else
 cat $HOME/.GetFAME/getfame.error $HOME/.GetFAME/fame.error
fi

#cleanup
rm -f  $HOME/.GetFAME/fame.inp

#end of script



