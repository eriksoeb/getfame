
#!/bin/bash

#Erik Soeberg creates json file with universal epoch date for comparisons and charting in tools like highchart javascript
#June/July 2024/2025
#run using: getfame -n database.db series?
#run using: getfame -s database.db series? "date 2023 to 2025"
#run using: getfame -e "db1.db, db2, db3" "pct(db2'series)" "deci 1; date 2025" 


#MNAME=$(basename "$0")

SWITCH=$1
MNAME="getfamenames"

if [[ "$SWITCH" == "-s" ]]; then
MNAME="getfameseries"

elif [[ "$SWITCH" == "-e" ]]; then
MNAME="getfameexpr"

elif [[ "$SWITCH" == "-n" ]]; then
MNAME="getfamenames"
else

echo "first param to getfame must be -n -s or -e"
echo "getgamenames -n, getfameseries -s getfameexpr -e"
echo "Please try again"
echo "example : getfame -s kpi.db total?"
exit 1

fi


#location of program is the plave the systemi software is located
GETFAMESYS="$(dirname "$(readlink -f "$0")")"
export GETFAMESYS;


#if log have it where the sueres have write access to the file
export GETFAMELOG="$REFERTID/system/myfame/getlog.txt"

#lagrer resultatfil, samme som vises i skjerm terminal output:
if test ! -d $HOME/.GetFAME; then
mkdir $HOME/.GetFAME
fi

#resultfile
if [ -s $HOME/.GetFAME/$MNAME.json ]
then
  rm $HOME/.GetFAME/$MNAME.json
  touch $HOME/.GetFAME/$MNAME.json
fi


if [ -s $HOME/.GetFAME/fame.error ]
then
  rm $HOME/.GetFAME/fame.error
fi


if [ -s $HOME/.GetFAME/getfame.error ]
then
  rm $HOME/.GetFAME/getfame.error
fi

if [ -s $HOME/.GetFAME/fame.inp ]
then
  rm $HOME/.GetFAME/fame.inp
fi



ERROR_FILE=$HOME/.GetFAME/getfame.error
> $ERROR_FILE

> $HOME/.GetFAME/getfame.error
> $HOME/.GetFAME/fame.error


MYDATE=$(date +'%Y-%m-%dT%H:%M:%S')

#jun2
if [ $# -eq 0 ]; then
#echo " needs arguments, show readme"
cat $GETFAMESYS/readme.txt 
echo "This is the readme.txt  $GETFAMESYS/readme.txt "
echo "The APIs needs arguments - scroll to read or combine with more $GETFAMESYS/readme.txt"
exit 1
fi





#jun2
if [ $# -lt 3 ] || [ $# -gt 4 ];  then
cp $GETFAMESYS/error.$MNAME $ERROR_FILE  
cat $ERROR_FILE
exit 1
fi

 

MYDISPLAY=$DISPLAY;export MYDISPLAY



#setter FAME_PATH til katalogen der fame.inp som starter applikasjonen ligger.
FAME_PATH=$GETFAMESYS; export FAME_PATH
FAME_PATH=$HOME/.GetFAME; export FAME_PATH


DUMMY=""

#length if string TBC
str=$2
strlen=${#str}

#A user listed all his series in the database as an argument... what about wildcarding??
if [ $strlen -ge 64000 ]; then
echo 'Sorry, wildlist length :' $(($strlen+0)) 'can NOT be longer then maximum max is 64 000 characters'
echo 'Reduce the length of the wildlist string and try again!'
exit 1
fi



cp -f  $GETFAMESYS/api.inp $HOME/.GetFAME/fame.inp

echo "-- debugger  $MNAME $GETFAMESYS  $#  $HOME  " >> $HOME/.GetFAME/fame.inp


#jun2
if  [ $# -eq 3 ]; then
echo 'try; $'$MNAME '  ' "\""$2"\"" ', ' "\""$3"\"" ',' "\""$DUMMY"\""  >> $HOME/.GetFAME/fame.inp

else
echo 'try; $'$MNAME '  ' "\""$2"\"" ', ' "\""$3"\"" ', '"\""$4"\""  >> $HOME/.GetFAME/fame.inp
fi

echo '; otherwise; $writeerror lasterror, lasterror; end try; ' >> $HOME/.GetFAME/fame.inp



#setter FAME_TEMP for lagring av fames 2 work filer 
FAME_TEMP=/tmp;       export FAME_TEMP

#setter XNLSPATH for klipping i neste versjon av fame
XNLSPATH=$FAME/X11R6/nls;               export XNLSPATH





#better when fame licenece expires:
$FAME/fame i $HOME/.GetFAME/fame.inp  &>/dev/null  



cat $HOME/.GetFAME/getfame.error $HOME/.GetFAME/fame.error $HOME/.GetFAME/$MNAME.json

#cleanup
rm -f  $HOME/.GetFAME/fame.inp

#end of script


